<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\code\cf-windows-prison\lib\HP.WindowsPrison.dll">
   <Modules>
    <Module Name="hp.windowsprison.dll">
     <Namespaces>
      <Namespace Name="HP.WindowsPrison">
       <Types>
        <Type Name="NativeMethods" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CreateEnvironmentBlock(System.IntPtr&amp;,System.IntPtr,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'bInherit' of P/Invoke 'NativeMethods.CreateEnvironmentBlock(out IntPtr, IntPtr, bool)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateProcess(System.String,System.String,System.IntPtr,System.IntPtr,System.Boolean,HP.WindowsPrison.NativeMethods+ProcessCreationFlags,System.String,System.String,HP.WindowsPrison.NativeMethods+STARTUPINFO&amp;,HP.WindowsPrison.NativeMethods+PROCESS_INFORMATION&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'bInheritHandles' of P/Invoke 'NativeMethods.CreateProcess(string, string, IntPtr, IntPtr, bool, NativeMethods.ProcessCreationFlags, string, string, ref NativeMethods.STARTUPINFO, out NativeMethods.PROCESS_INFORMATION)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpApplicationName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpCommandLine' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="6" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpEnvironment' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="7" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpCurrentDirectory' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateProcessAsUser(System.IntPtr,System.String,System.String,HP.WindowsPrison.NativeMethods+SECURITY_ATTRIBUTES&amp;,HP.WindowsPrison.NativeMethods+SECURITY_ATTRIBUTES&amp;,System.Boolean,HP.WindowsPrison.NativeMethods+ProcessCreationFlags,System.String,System.String,HP.WindowsPrison.NativeMethods+STARTUPINFO&amp;,HP.WindowsPrison.NativeMethods+PROCESS_INFORMATION&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'bInheritHandles' of P/Invoke 'NativeMethods.CreateProcessAsUser(IntPtr, string, string, ref NativeMethods.SECURITY_ATTRIBUTES, ref NativeMethods.SECURITY_ATTRIBUTES, bool, NativeMethods.ProcessCreationFlags, string, string, ref NativeMethods.STARTUPINFO, out NativeMethods.PROCESS_INFORMATION)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.CreateProcessAsUser(IntPtr, string, string, ref NativeMethods.SECURITY_ATTRIBUTES, ref NativeMethods.SECURITY_ATTRIBUTES, bool, NativeMethods.ProcessCreationFlags, string, string, ref NativeMethods.STARTUPINFO, out NativeMethods.PROCESS_INFORMATION)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpApplicationName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpCommandLine' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="7" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpEnvironment' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="8" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpCurrentDirectory' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateProcessWithLogonW(System.String,System.String,System.String,HP.WindowsPrison.NativeMethods+LogonFlags,System.String,System.String,HP.WindowsPrison.NativeMethods+ProcessCreationFlags,System.String,System.String,HP.WindowsPrison.NativeMethods+STARTUPINFO&amp;,HP.WindowsPrison.NativeMethods+PROCESS_INFORMATION&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpUsername' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpDomain' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpPassword' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="4" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpApplicationName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="5" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpCommandLine' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="7" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpEnvironment' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="8" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpCurrentDirectory' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnumWindowStations(HP.WindowsPrison.NativeMethods+EnumWindowStationsDelegate,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.EnumWindowStations(NativeMethods.EnumWindowStationsDelegate, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUserObjectInformation(System.IntPtr,System.Int32,System.Byte[],System.UInt32,System.UInt32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.GetUserObjectInformation(IntPtr, int, byte[], uint, out uint)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadUserProfile(System.IntPtr,HP.WindowsPrison.ProfileInfo&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.LoadUserProfile(IntPtr, ref ProfileInfo)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenThread(HP.WindowsPrison.NativeMethods+ThreadAccess,System.Boolean,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'bInheritHandle' of P/Invoke 'NativeMethods.OpenThread(NativeMethods.ThreadAccess, bool, int)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenWindowStation(System.String,System.Boolean,HP.WindowsPrison.NativeMethods+WINDOWS_STATION_ACCESS_MASK)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszWinSta' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegUnLoadKey(System.IntPtr,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpSubKey' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetProcessWindowStation(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.SetProcessWindowStation(IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Prison" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
           <Issue Name="Type" Certainty="75" Level="Warning">'Prison' is coupled with 85 different types from 23 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'Prison' because it creates members of the following IDisposable types: 'JobObject'. If 'Prison' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BuildEnvironmentVariable(System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="828">Method 'Prison.BuildEnvironmentVariable(Dictionary&lt;string, string&gt;)' passes 'EvnironmantVariables' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ChangeRegistryUserProfile(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="1064">In method 'Prison.ChangeRegistryUserProfile(string)', call System.IDisposable.Dispose on object 'RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloseRemoteSession(HP.WindowsPrison.ExecutorService.IExecutor)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="1217">The 'this' parameter (or 'Me' in Visual Basic) of 'Prison.CloseRemoteSession(IExecutor)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeletePersistedPrirson()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="575">Method 'Prison.DeletePersistedPrirson()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Deleting persisted prison {0}".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="580">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Prison.DeletePersistedPrirson()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Destroy()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="499">Method 'Prison.Destroy()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Destroying prison {0}".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="356">In member 'Prison.Execute(string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="361">In member 'Prison.Execute(string, string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.String,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="366">In member 'Prison.Execute(string, string, bool)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="371">In member 'Prison.Execute(string, string, bool, Dictionary&lt;string, string&gt;)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message Id="extraEnvironmentVariables" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="371">Parameter 'extraEnvironmentVariables' of 'Prison.Execute(string, string, bool, Dictionary&lt;string, string&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="376">In member 'Prison.Execute(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="376">In method 'Prison.Execute(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)', correct the spelling of 'Dir' in parameter name 'curDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetChildPrecesses(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToInt32(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="891">Because the behavior of 'Convert.ToInt32(object)' could vary based on the current user's locale settings, replace this call in 'Prison.GetChildPrecesses(int)' with a call to 'Convert.ToInt32(object, IFormatProvider)'. If the result of 'Convert.ToInt32(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDefaultEnvironmentVariables()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="930">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.GetDefaultEnvironmentVariables()'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="50" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="925">Change 'Prison.GetDefaultEnvironmentVariables()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHandleFromPipe(System.IO.Pipes.PipeStream)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="1179">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.GetHandleFromPipe(PipeStream)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNativeUserProfileDirectory(System.Text.StringBuilder)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="1059">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.GetNativeUserProfileDirectory(StringBuilder)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'Prison.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeProcess(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="444">Method 'Prison.InitializeProcess(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Starting process \'{0}\' with arguments \'{1}\' as user \'{2}\' in working dir \'...".</Issue>
            </Message>
            <Message Id="dir" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="444">Correct the spelling of the unrecognized token 'dir' in the literal '"Starting process \'{0}\' with arguments \'{1}\' as user \'{2}\' in working dir \'..."'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="446">Replace the call to 'string.operator ==(string, string)' in 'Prison.InitializeProcess(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeProcessWithChangedSession(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="401">In method 'Prison.InitializeProcessWithChangedSession(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)', call System.IDisposable.Dispose on object 'channelFactory' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="391">In method 'Prison.InitializeProcessWithChangedSession(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)', correct the spelling of 'Dir' in parameter name 'curDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="interactive" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="391">Parameter 'interactive' of 'Prison.InitializeProcessWithChangedSession(string, string, string, bool, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="765">Method 'Prison.Load()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Found {0} prison entries".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="759">Method 'Prison.Load()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Loading prison database from {0}".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadUserProfile()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="703">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.LoadUserProfile()'.</Issue>
            </Message>
            <Message TypeName="CallGetLastErrorImmediatelyAfterPInvoke" Category="Microsoft.Interoperability" CheckId="CA1404" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="709">Method 'Prison.LoadUserProfile()' called GetLastWin32Error but the immediately preceding call to 'Logger.Error(string, params object[])' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="715">Method 'Prison.LoadUserProfile()' called GetLastWin32Error but the immediately preceding call to 'Logger.Error(string, params object[])' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="714">Method 'Prison.LoadUserProfile()' called GetLastWin32Error but the immediately preceding call to 'Win32Exception.Win32Exception(int)' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
            </Message>
            <Message Id="HP.WindowsPrison.Logger.Error(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="714">Method 'Prison.LoadUserProfile()' passes a literal string as parameter 'message' of a call to 'Logger.Error(string, params object[])'. Retrieve the following string(s) from a resource table instead: "LoadUserProfile failed HKCU handle was not loaded. Error code: {0} for prison {1...".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="708">Method 'Prison.LoadUserProfile()' passes a literal string as parameter 'message' of a call to 'Logger.Error(string, params object[])'. Retrieve the following string(s) from a resource table instead: "LoadUserProfile failed with error code: {0} for prison {1}".</Issue>
            </Message>
            <Message Id="LoadUserProfile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="714">Correct the spelling of the unrecognized token 'LoadUserProfile' in the literal '"LoadUserProfile failed HKCU handle was not loaded. Error code: {0} for prison {1..."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="708">Correct the spelling of the unrecognized token 'LoadUserProfile' in the literal '"LoadUserProfile failed with error code: {0} for prison {1}"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Lockdown(HP.WindowsPrison.PrisonRules)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="168">Method 'Prison.Lockdown(PrisonRules)' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Locking down prison {0}".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="170">In externally visible method 'Prison.Lockdown(PrisonRules)', validate parameter 'prisonRules' before using it.</Issue>
            </Message>
            <Message Id="prisonRules" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="162">'prisonRules', a parameter declared in 'Prison.Lockdown(PrisonRules)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NativeCreateProcessAsUser(HP.WindowsPrison.SafeTokenHandle,System.String,System.String,HP.WindowsPrison.NativeMethods+SECURITY_ATTRIBUTES&amp;,HP.WindowsPrison.NativeMethods+SECURITY_ATTRIBUTES&amp;,System.Boolean,HP.WindowsPrison.NativeMethods+ProcessCreationFlags,System.String,System.String,HP.WindowsPrison.NativeMethods+STARTUPINFO&amp;,HP.WindowsPrison.NativeMethods+PROCESS_INFORMATION&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="1197">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.NativeCreateProcessAsUser(SafeTokenHandle, string, string, ref NativeMethods.SECURITY_ATTRIBUTES, ref NativeMethods.SECURITY_ATTRIBUTES, bool, NativeMethods.ProcessCreationFlags, string, string, ref NativeMethods.STARTUPINFO, out NativeMethods.PROCESS_INFORMATION)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NativeCreateProcessAsUser(System.Boolean,System.String,System.String,System.String,System.String,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGetLastErrorImmediatelyAfterPInvoke" Category="Microsoft.Interoperability" CheckId="CA1404" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="1166">Method 'Prison.NativeCreateProcessAsUser(bool, string, string, string, string, PipeStream, PipeStream, PipeStream)' called GetLastWin32Error but the immediately preceding call to 'Prison.NativeCreateProcessAsUser(SafeTokenHandle, string, string, ref NativeMethods.SECURITY_ATTRIBUTES, ref NativeMethods.SECURITY_ATTRIBUTES, bool, NativeMethods.ProcessCreationFlags, string, string, ref NativeMethods.STARTUPINFO, out NativeMethods.PROCESS_INFORMATION)' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Reattach()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="140">Method 'Prison.Reattach()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Prison {0} has no Job Object to attach to".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="134">Method 'Prison.Reattach()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Prison {0} is attaching to Job Object {1}".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResumeProcess(System.Diagnostics.Process)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="480">The 'this' parameter (or 'Me' in Visual Basic) of 'Prison.ResumeProcess(Process)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RunGuard()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalError" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="261">Modify 'Prison.RunGuard()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="268">'Prison.RunGuard()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="555">Method 'Prison.Save()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Persisting prison {0}".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="563">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Prison.Save()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetUsersEnvironmentVariables(System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="env" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="846">In method 'Prison.SetUsersEnvironmentVariables(Dictionary&lt;string, string&gt;)', correct the spelling of 'env' in parameter name 'envVariables' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="852">In externally visible method 'Prison.SetUsersEnvironmentVariables(Dictionary&lt;string, string&gt;)', validate parameter 'envVariables' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnloadUserProfile()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="595">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.UnloadUserProfile()'.</Issue>
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="599">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.UnloadUserProfile()'.</Issue>
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="599">Remove the call to SafeHandle.DangerousGetHandle from 'Prison.UnloadUserProfile()'.</Issue>
            </Message>
            <Message Id="usersHive" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="Prison.cs" Line="595">'Prison.UnloadUserProfile()' declares a variable, 'usersHive', of type 'IntPtr', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PrisonException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'PrisonException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="PrisonRules" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CPUPercentageLimit" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CPU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CPU' in member name 'PrisonRules.CPUPercentageLimit' by changing it to 'Cpu'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PrisonUser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="116">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'PrisonUser.PrisonUser(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateUsername(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="username" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="169">'username', a parameter declared in 'PrisonUser.GenerateUsername(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ListOrphanedUsers()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="66">'PrisonUser.ListOrphanedUsers()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ListUsers()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="79">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'PrisonUser.ListUsers()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Username" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="44">The discrete term 'Username' in member name 'PrisonUser.Username' should be expressed as a compound word, 'UserName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UsernamePrefix" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="36">The discrete term 'Username' in member name 'PrisonUser.UsernamePrefix' should be expressed as a compound word, 'UserName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserSID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison" File="PrisonUser.cs" Line="60">Correct the casing of 'SID' in member name 'PrisonUser.UserSID' by changing it to 'Sid'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Rule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetFlag()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in member name 'Rule.GetFlag()' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="50" Level="Warning">Change 'Rule.GetFlag()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RuleType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
           <Issue Certainty="75" Level="Error">If enumeration name 'RuleType' is singular, change it to a plural form.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CPU" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CPU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CPU' in member name 'RuleType.CPU' by changing it to 'Cpu'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Filesystem" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filesystem" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Filesystem' in member name 'RuleType.Filesystem' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Httpsys" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Httpsys" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Httpsys' in member name 'RuleType.Httpsys' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IISGroup" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IIS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'IIS' in member name 'RuleType.IISGroup' by changing it to 'Iis'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MsSqlInstance" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error">Provide a message for the ObsoleteAttribute that marks 'RuleType.MsSqlInstance'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SafeTokenHandle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CloseHandle(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'SafeTokenHandle.CloseHandle(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="HP.WindowsPrison.Allowances">
       <Types>
        <Type Name="Httpsys" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Httpsys" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Httpsys' in type name 'Httpsys'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddPortAccess(System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="39">Method 'Httpsys.AddPortAccess(int, string)' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Adding url acl with the following command: {0}".</Issue>
            </Message>
            <Message Id="acl" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="39">Correct the spelling of the unrecognized token 'acl' in the literal '"Adding url acl with the following command: {0}"'.</Issue>
            </Message>
            <Message Id="netsh" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="45">Correct the spelling of the unrecognized token 'netsh' in the literal '"netsh http add urlacl command failed with error code {0}."'.</Issue>
            </Message>
            <Message Id="urlacl" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="45">Correct the spelling of the unrecognized token 'urlacl' in the literal '"netsh http add urlacl command failed with error code {0}."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Apply(HP.WindowsPrison.Prison)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="16">In externally visible method 'Httpsys.Apply(Prison)', validate parameter 'prison' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Destroy(HP.WindowsPrison.Prison)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="22">In externally visible method 'Httpsys.Destroy(Prison)', validate parameter 'prison' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ListPortAccess()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="70">Method 'Httpsys.ListPortAccess()' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string)'. Retrieve the following string(s) from a resource table instead: "Listing url acl".</Issue>
            </Message>
            <Message Id="acl" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="70">Correct the spelling of the unrecognized token 'acl' in the literal '"Listing url acl"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemovePortAccess(System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="55">Replace method 'Httpsys.RemovePortAccess(int, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="HP.WindowsPrison.Logger.Debug(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="58">Method 'Httpsys.RemovePortAccess(int, bool)' passes a literal string as parameter 'message' of a call to 'Logger.Debug(string, params object[])'. Retrieve the following string(s) from a resource table instead: "Removing url acl with the following command: {0}".</Issue>
            </Message>
            <Message Id="acl" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="58">Correct the spelling of the unrecognized token 'acl' in the literal '"Removing url acl with the following command: {0}"'.</Issue>
            </Message>
            <Message Id="netsh" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="64">Correct the spelling of the unrecognized token 'netsh' in the literal '"netsh http delete urlacl command failed with exit code {0}."'.</Issue>
            </Message>
            <Message Id="urlacl" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="Httpsys.cs" Line="64">Correct the spelling of the unrecognized token 'urlacl' in the literal '"netsh http delete urlacl command failed with exit code {0}."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IISGroup" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Apply(HP.WindowsPrison.Prison)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Allowances" File="IISGroup.cs" Line="18">In externally visible method 'IISGroup.Apply(Prison)', validate parameter 'prison' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="HP.WindowsPrison.ExecutorService">
       <Types>
        <Type Name="IExecutor" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExecuteProcess(HP.WindowsPrison.Prison,System.String,System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream,System.IO.Pipes.PipeStream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error">In member 'IExecutor.ExecuteProcess(Prison, string, string, string, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IExecutor.ExecuteProcess(Prison, string, string, string, Dictionary&lt;string, string&gt;, PipeStream, PipeStream, PipeStream)', correct the spelling of 'Dir' in parameter name 'curDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="HP.WindowsPrison.Restrictions">
       <Types>
        <Type Name="Filesystem" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#AddCreateSubdirDenyRule(System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="subdir" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Filesystem.cs" Line="88">Correct the spelling of the unrecognized token 'subdir' in the literal '"icacls command denying subdir creation failed; command was: {0}"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#openDirLock" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning">It appears that field 'Filesystem.openDirLock' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Network" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Apply(HP.WindowsPrison.Prison)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="18">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Network.Apply(Prison)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="19">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Network.Apply(Prison)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="14">In externally visible method 'Network.Apply(Prison)', validate parameter 'prison' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateOutboundThrottlePolicy(System.String,System.Int32,System.Int64)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="71">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Network.CreateOutboundThrottlePolicy(string, int, long)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Destroy(HP.WindowsPrison.Prison)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="26">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Network.Destroy(Prison)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="25">In externally visible method 'Network.Destroy(Prison)', validate parameter 'prison' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#List()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="129">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Network.List()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="127">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Network.List()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveOutboundThrottlePolicy(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="Network.cs" Line="85">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Network.RemoveOutboundThrottlePolicy(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WindowStation" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Apply(HP.WindowsPrison.Prison)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGetLastErrorImmediatelyAfterPInvoke" Category="Microsoft.Interoperability" CheckId="CA1404" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="34">Method 'WindowStation.Apply(Prison)' called GetLastWin32Error but the immediately preceding call to 'Marshal.GetLastWin32Error()' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="66">Method 'WindowStation.Apply(Prison)' called GetLastWin32Error but the immediately preceding call to 'WindowStation.NativeCreateDesktop()' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="44">Method 'WindowStation.Apply(Prison)' called GetLastWin32Error but the immediately preceding call to 'WindowStation.NativeCreateWindowStation(string)' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="28">Method 'WindowStation.Apply(Prison)' called GetLastWin32Error but the immediately preceding call to 'WindowStation.NativeOpenWindowStation(string)' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="58">Method 'WindowStation.Apply(Prison)' called GetLastWin32Error but the immediately preceding call to 'WindowStation.NativeSetProcessWindowStation(IntPtr)' is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="69">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'WindowStation.Apply(Prison)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Restrictions" File="WindowStation.cs" Line="26">In externally visible method 'WindowStation.Apply(Prison)', validate parameter 'prison' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="HP.WindowsPrison.Utilities">
       <Types>
        <Type Name="PrivilegeAdjust" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
           <Issue Certainty="90" Level="Error">Because type 'PrivilegeAdjust' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AdjustTokenPrivileges(System.IntPtr,System.Boolean,HP.WindowsPrison.Utilities.PrivilegeAdjust+TokPriv1Luid&amp;,System.Int32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'disall' of P/Invoke 'PrivilegeAdjust.AdjustTokenPrivileges(IntPtr, bool, ref PrivilegeAdjust.TokPriv1Luid, int, IntPtr, IntPtr)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'PrivilegeAdjust.AdjustTokenPrivileges(IntPtr, bool, ref PrivilegeAdjust.TokPriv1Luid, int, IntPtr, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'PrivilegeAdjust.AdjustTokenPrivileges(IntPtr, bool, ref PrivilegeAdjust.TokPriv1Luid, int, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnablePrivilege(System.IntPtr,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hproc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="PrivilegeAdjust.cs" Line="43">In method 'PrivilegeAdjust.EnablePrivilege(IntPtr, string, bool)', correct the spelling of 'hproc' in parameter name 'hproc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LookupPrivilegeValue(System.String,System.String,System.Int64&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'PrivilegeAdjust.LookupPrivilegeValue(string, string, ref long)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'PrivilegeAdjust.LookupPrivilegeValue(string, string, ref long)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'host' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'name' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenProcessToken(System.IntPtr,System.Int32,System.IntPtr&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'PrivilegeAdjust.OpenProcessToken(IntPtr, int, ref IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'PrivilegeAdjust.OpenProcessToken(IntPtr, int, ref IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SystemVirtualAddressSpaceQuotas" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RemoveQuotas(System.Security.Principal.IdentityReference)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="SystemVirtualAddressSpaceQuotas.cs" Line="91">In externally visible method 'SystemVirtualAddressSpaceQuotas.RemoveQuotas(IdentityReference)', validate parameter 'user' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetNonPagedPoolQuota(System.Int64,System.Security.Principal.IdentityReference)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="SystemVirtualAddressSpaceQuotas.cs" Line="41">In externally visible method 'SystemVirtualAddressSpaceQuotas.SetNonPagedPoolQuota(long, IdentityReference)', validate parameter 'user' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPagedPoolQuota(System.Int64,System.Security.Principal.IdentityReference)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="SystemVirtualAddressSpaceQuotas.cs" Line="25">In externally visible method 'SystemVirtualAddressSpaceQuotas.SetPagedPoolQuota(long, IdentityReference)', validate parameter 'user' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPagingFileQuota(System.Int64,System.Security.Principal.IdentityReference)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="SystemVirtualAddressSpaceQuotas.cs" Line="57">In externally visible method 'SystemVirtualAddressSpaceQuotas.SetPagingFileQuota(long, IdentityReference)', validate parameter 'user' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetWorkingSetPagesQuota(System.Int64,System.Security.Principal.IdentityReference)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="SystemVirtualAddressSpaceQuotas.cs" Line="73">In externally visible method 'SystemVirtualAddressSpaceQuotas.SetWorkingSetPagesQuota(long, IdentityReference)', validate parameter 'user' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserImpersonator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetRegistryHandle()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="50" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="UserImpersonator.cs" Line="131">Change 'UserImpersonator.GetRegistryHandle()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WindowsUsersAndGroups" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateUser(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="72">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'WindowsUsersAndGroups.CreateUser(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateUser(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="85">In method 'WindowsUsersAndGroups.CreateUser(string, string, string)', call System.IDisposable.Dispose on object 'newUser' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="87">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'WindowsUsersAndGroups.CreateUser(string, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGroups()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="141">In method 'WindowsUsersAndGroups.GetGroups()', call System.IDisposable.Dispose on object 'new GroupPrincipal(context)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLocalUserSid(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="280">In member 'WindowsUsersAndGroups.GetLocalUserSid(string)', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUsers()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="29">In method 'WindowsUsersAndGroups.GetUsers()', call System.IDisposable.Dispose on object 'new UserPrincipal(context)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUsersDescription()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="52">In method 'WindowsUsersAndGroups.GetUsersDescription()', call System.IDisposable.Dispose on object 'new UserPrincipal(context)' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="50" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities" File="WindowsUsersAndGroups.cs" Line="47">Change 'WindowsUsersAndGroups.GetUsersDescription()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="HP.WindowsPrison.Utilities.WindowsJobObjects">
       <Types>
        <Type Name="JobObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Attach(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities\WindowsJobObjects" File="JobObject.cs" Line="182">In method 'JobObject.Attach(string)', call System.IDisposable.Dispose on object 'jobHandle' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="OpenJobObject" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities\WindowsJobObjects" File="JobObject.cs" Line="186">Correct the spelling of the unrecognized token 'OpenJobObject' in the literal '"OpenJobObject failed."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPUPercentageLimit" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CPU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\code\cf-windows-prison\src\HP.WindowsPrison\Utilities\WindowsJobObjects" File="JobObject.cs" Line="387">Correct the casing of 'CPU' in member name 'JobObject.CPUPercentageLimit' by changing it to 'Cpu'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#name" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-03-17 01:07:31Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning">It appears that field 'JobObject.name' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" BreaksBuild="True">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">Remove the call to SafeHandle.DangerousGetHandle from {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385973.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="reliabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" BreaksBuild="True">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Type">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" BreaksBuild="True">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" BreaksBuild="True">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CallGetLastErrorImmediatelyAfterPInvoke" Category="Microsoft.Interoperability" CheckId="CA1404" BreaksBuild="True">
   <Name>Call GetLastError immediately after P/Invoke</Name>
   <Description>The last Win32 error can be reset as a result of making managed calls, due to P/Invokes called by the runtime itself. In order to ensure the correctness of the value returned by GetLastWin32Error, place the call immediately after the relevant platform invoke call in your code.</Description>
   <Resolution Name="Default">Method {0} called GetLastWin32Error but the immediately preceding call to {1} is not a P/Invoke statement. Move the call to GetLastWin32Error so that it immediately follows the relevant platform invoke call.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182199.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" BreaksBuild="True">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" BreaksBuild="True">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" BreaksBuild="True">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" BreaksBuild="True">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" BreaksBuild="True">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" BreaksBuild="True">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" BreaksBuild="True">
   <Name>Flags enums should have plural names</Name>
   <Description>An enumeration marked with FlagsAttribute should have a plural name.</Description>
   <Resolution Name="Default">If enumeration name {0} is singular, change it to a plural form.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" BreaksBuild="True">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" BreaksBuild="True">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" BreaksBuild="True">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" BreaksBuild="True">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" BreaksBuild="True">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Default">Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Resolution Name="Return">Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182206.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" BreaksBuild="True">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" BreaksBuild="True">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" BreaksBuild="True">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" BreaksBuild="True">
   <Name>Provide ObsoleteAttribute message</Name>
   <Description>The ObsoleteAttribute.Message property provides the text message displayed when an obsolete type or member is compiled. This message should provide information on the replacement for the obsolete element.</Description>
   <Resolution Name="Default">Provide a message for the ObsoleteAttribute that marks {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182166.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" BreaksBuild="True">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" BreaksBuild="True">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" BreaksBuild="True">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" BreaksBuild="True">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" BreaksBuild="True">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" BreaksBuild="True">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" BreaksBuild="True">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" BreaksBuild="True">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" BreaksBuild="True">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" BreaksBuild="True">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" BreaksBuild="True">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" BreaksBuild="True">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
